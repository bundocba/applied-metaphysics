<?php/*** @version 1.0.0* @package RSEvents!Pro 1.0.0* @copyright (C) 2011 www.rsjoomla.com* @license GPL, http://www.gnu.org/copyleft/gpl.html*/defined( '_JEXEC' ) or die( 'Restricted access' );jimport( 'joomla.application.component.model' );class rsmailModelSettings extends JModelAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since	1.6	 */	protected $text_prefix = 'COM_RSMAIL';		/**	 * Method to get the record form.	 *	 * @param	array	$data		Data for the form.	 * @param	boolean	$loadData	True if the form is to load its own data (default case), false if not.	 *	 * @return	mixed	A JForm object on success, false on failure	 * @since	1.6	 */	public function getForm($data = array(), $loadData = true) {		$jinput = JFactory::getApplication()->input;				// Get the form.		$form = $this->loadForm('com_rsmail.settings', 'settings', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))			return false;				return $form;	}		/**	 * Method to get the data that should be injected in the form.	 *	 * @return	mixed	The data for the form.	 * @since	1.6	 */	protected function loadFormData() {		$data = (array) $this->getConfig();				if (isset($data['unsubscribe_lists'])) {			$data['unsubscribe_lists'] = explode(',',$data['unsubscribe_lists']);		}				return $data;	}		/**	 * Method to get Tabs	 *	 * @return	mixed	The Joomla! Tabs.	 * @since	1.6	 */	public function getTabs() {		$tabs = new RSTabs('settings');		return $tabs;	}		/**	 * Method to get the configuration data.	 *	 * @return	mixed	The data for the configuration.	 * @since	1.6	 */	public function getConfig() {		return rsmailHelper::getConfig();	}		/**	 * Method to get the available layouts.	 *	 * @return	mixed	The available layouts.	 * @since	1.6	 */	public function getLayouts() {		$fields = array('general', 'bounce', 'emails', 'joomla');				return $fields;	}			/**	 * Method to save configuration.	 *	 * @return	boolean		True if success.	 * @since	1.6	 */	public function save($data) {		$db		= $this->getDbo();		$query	= $db->getQuery(true);		$now	= JFactory::getDate()->toSql();		$subquery	= $db->getQuery(true);				$query->clear()			->select('*')			->from($db->qn('#__rsmail_config'));				$db->setQuery($query);		if ($configuration = $db->loadObjectList()) {			foreach($configuration as $config) {				if (isset($data[$config->ConfigName])) {					$query->clear()						->update($db->qn('#__rsmail_config'))						->set($db->qn('ConfigValue').' = '.$db->q($data[$config->ConfigName]))						->where($db->qn('ConfigName').' = '.$db->q($config->ConfigName));					$db->setQuery($query);					$db->execute();				}			}		}				$add_users			= JFactory::getApplication()->input->getInt('joomla_users',0);		$add_blocked_users	= JFactory::getApplication()->input->getInt('joomla_blocked_users',0);		$IdList				= (int) $data['jur_list'];		$name				= $data['jur_name'];		$username			= $data['jur_username'];				if($add_users && $IdList != 0) {			$subquery->clear()->select($db->qn('SubscriberEmail'))->from($db->qn('#__rsmail_subscribers'))->where($db->qn('IdList').' = '.$IdList);						$query->clear()				->select($db->qn('id'))->select($db->qn('name'))				->select($db->qn('username'))->select($db->qn('email'))				->from($db->qn('#__users'))				->where($db->qn('email').' NOT IN ('.$subquery.')');						if ($add_blocked_users)				$query->where($db->qn('block').' IN (0,1)');			else				$query->where($db->qn('block').' = 0');						$db->setQuery($query);			if ($emails = $db->loadObjectList()) {				foreach ($emails as $email) {					$query->clear()						->insert($db->qn('#__rsmail_subscribers'))						->set($db->qn('SubscriberEmail').' = '.$db->q($email->email))						->set($db->qn('IdList').' = '.$IdList)						->set($db->qn('UserId').' = '.(int) $email->id)						->set($db->qn('DateSubscribed').' = '.$db->q($now))						->set($db->qn('published').' = 1');										$db->setQuery($query);					$db->execute();					$subscriberId = (int) $db->insertid();										if ($name != JText::_('RSM_IGNORE')) {						$query->clear()							->insert($db->qn('#__rsmail_subscriber_details'))							->set($db->qn('IdSubscriber').' = '.$subscriberId)							->set($db->qn('IdList').' = '.$IdList)							->set($db->qn('FieldName').' = '.$db->q($name))							->set($db->qn('FieldValue').' = '.$db->q($email->name));												$db->setQuery($query);						$db->execute();					}										if ($username != JText::_('RSM_IGNORE')) {						$query->clear()							->insert($db->qn('#__rsmail_subscriber_details'))							->set($db->qn('IdSubscriber').' = '.$subscriberId)							->set($db->qn('IdList').' = '.$IdList)							->set($db->qn('FieldName').' = '.$db->q($username))							->set($db->qn('FieldValue').' = '.$db->q($email->username));												$db->setQuery($query);						$db->execute();					}				}			}		}				return true;	}		/**	 * Method to test email configuration.	 *	 * @return	boolean		True if success.	 */	public function test() {		require_once JPATH_SITE.'/components/com_rsmail/helpers/bounce.php';		$connect = rsmailBounce::getInstance();		$connect->testconnection();				if ($connect->getErrors()) {			$this->setError($connect->getErrors());			return false;		}				return true;	}}